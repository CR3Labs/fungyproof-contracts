{
  "address": "0x4Ae6736d3c542E15fe57a898EC7bD068131Af046",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "Bind",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "CreateFungyProofEnrichments",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "Unbind",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "__FungyProofEnrichments_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "bind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "enrichmentBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "enrichmentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "isPermanent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "permanent",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "permanents",
          "type": "bool[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "purchaseAndBind",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ownerOfFunc",
          "type": "string"
        }
      ],
      "name": "setOwnerOfFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payee_",
          "type": "address"
        }
      ],
      "name": "setPayee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enrichmentId",
          "type": "uint256"
        }
      ],
      "name": "unbind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4973b72a222ed751ace5e8a453fa87b0a76566a3d395eddcefff111098db4efa",
  "receipt": {
    "to": null,
    "from": "0x6fEed681d9a539833ED3EDB708Be22154d6c216E",
    "contractAddress": "0x4Ae6736d3c542E15fe57a898EC7bD068131Af046",
    "transactionIndex": 0,
    "gasUsed": "3767828",
    "logsBloom": "0x
    "blockHash": "0xf11ef7243f0e401e82d2422553c50515d74c02f2c4b78595830565dea6821caa",
    "transactionHash": "0x4973b72a222ed751ace5e8a453fa87b0a76566a3d395eddcefff111098db4efa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20637637,
        "transactionHash": "0x4973b72a222ed751ace5e8a453fa87b0a76566a3d395eddcefff111098db4efa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006feed681d9a539833ed3edb708be22154d6c216e",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000042ee191792e8000000000000000000000000000000000000000000000000001e8c6f2f7f774980000000000000000000000000000000000000000000000000004488939f703a780000000000000000000000000000000000000000000000001e49811667e46180000000000000000000000000000000000000000000000000008776acb7032278",
        "logIndex": 0,
        "blockHash": "0xf11ef7243f0e401e82d2422553c50515d74c02f2c4b78595830565dea6821caa"
      }
    ],
    "blockNumber": 20637637,
    "cumulativeGasUsed": "3767828",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6cbbd882022da47c5f0d298f805df9cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"Bind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreateFungyProofEnrichments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"Unbind\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"__FungyProofEnrichments_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"enrichmentBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"enrichmentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"isPermanent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"permanent\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"permanents\",\"type\":\"bool[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"purchaseAndBind\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ownerOfFunc\",\"type\":\"string\"}],\"name\":\"setOwnerOfFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee_\",\"type\":\"address\"}],\"name\":\"setPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrichmentId\",\"type\":\"uint256\"}],\"name\":\"unbind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"exists(uint256)\":{\"details\":\"Indicates weither any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FungyProofEnrichments.sol\":\"FungyProofEnrichments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/EscrowUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPaymentUpgradeable is Initializable {\\n    EscrowUpgradeable private _escrow;\\n\\n    function __PullPayment_init() internal initializer {\\n        __PullPayment_init_unchained();\\n    }\\n\\n    function __PullPayment_init_unchained() internal initializer {\\n        _escrow = new EscrowUpgradeable();\\n        _escrow.initialize();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x90f8530b1b5226fa728fc70f06386345c5687e9695050c28220ca4d726da7713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xf59a504a9f476c67ab4adbbcefc32e8a93f5092fdb5f6f1c51ed876ce030004b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdf3a49167ee6c6ba60205aa5eefe29d3ff340b73d7326733eb53f440371b717e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06971bd1720c85e4771b94c83eb1e058af6070f6f6306ebc874a11501b238b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155Supply_init_unchained();\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal initializer {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb24f20b47b2a651df7f1b1826a21567d8617f532cebf5288fae47d0e699d4235\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal initializer {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe2ef9cf50e39f6d3f02112d61faa73e66ee09f8240d7579cda40c88d7d1d5119\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xac30b71710258ed0f0d1fea3d245577c4d3187cd85e9dc584a9cfa258addfcd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/escrow/EscrowUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/OwnableUpgradeable.sol\\\";\\nimport \\\"../AddressUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract EscrowUpgradeable is Initializable, OwnableUpgradeable {\\n    function initialize() public virtual initializer {\\n        __Escrow_init();\\n    }\\n    function __Escrow_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Escrow_init_unchained();\\n    }\\n\\n    function __Escrow_init_unchained() internal initializer {\\n    }\\n    using AddressUpgradeable for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf42e5df12141275ae355df7b162167e89877a8e68bf26898135c981edaa4e6ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/ERC1155URIBaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\n\\ncontract ERC1155URIBaseUpgradeable is ERC1155HolderUpgradeable, ERC1155SupplyUpgradeable, PullPaymentUpgradeable, OwnableUpgradeable {\\n    using StringsUpgradeable for uint;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155ReceiverUpgradeable, ERC1155Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    function uri(uint id) public view override virtual returns (string memory) {\\n        return _tokenURI(id);\\n    }\\n\\n    function _tokenURI(uint256 tokenId) internal view virtual returns (string memory) {\\n        string memory _uri = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _uri;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_uri).length > 0) {\\n            return string(abi.encodePacked(base, _uri));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _uri) internal virtual {\\n        _tokenURIs[tokenId] = _uri;\\n        emit URI(_tokenURI(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xeaff6522acd196d001c6bc165b03d66fdd7b1e38e9363cabce96dd918cd18f53\",\"license\":\"MIT\"},\"contracts/FungyProofEnrichments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./FungyProofEnrichmentsBase.sol\\\";\\n\\ncontract FungyProofEnrichments is FungyProofEnrichmentsBase {\\n    \\n    event CreateFungyProofEnrichments(address owner, string name, string symbol);\\n\\n    function __FungyProofEnrichments_init(string memory _name, string memory _symbol, string memory baseURI) external initializer {\\n       __FungyProofEnrichments_init_unchained(_name, _symbol, baseURI);\\n        emit CreateFungyProofEnrichments(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __FungyProofEnrichments_init_unchained(string memory _name, string memory _symbol, string memory baseURI) internal {\\n        __Ownable_init_unchained();\\n        __PullPayment_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(\\\"\\\");\\n        __FungyProofEnrichmentsBase_init_unchained(_name, _symbol);\\n        _setBaseURI(baseURI);\\n    }\\n    \\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x76f757bece0b4c957d94f7afc6b455d2fb5cbcb1a825bd071430ddba989f44d5\",\"license\":\"MIT\"},\"contracts/FungyProofEnrichmentsBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ERC1155URIBaseUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\ncontract FungyProofEnrichmentsBase is ERC1155URIBaseUpgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    CountersUpgradeable.Counter private _tokenIds;\\n\\n    string public name;\\n    string public symbol;\\n\\n    event Bind(\\n        address indexed operator,\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        uint256 enrichmentId,\\n        string uri\\n    );\\n    event Unbind(\\n        address indexed operator,\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        uint256 enrichmentId\\n    );\\n    event Purchase(address indexed operator, uint256 indexed enrichmentId);\\n\\n    // Mapping of enrichmentIds to prices (in wei)\\n    mapping(uint256 => uint256) private _prices;\\n\\n    // Mapping of enrichmentIds to enrichment permanence\\n    mapping(uint256 => bool) private _isPermanent;\\n\\n    // Mapping of enrichmentId -> contractAddress -> tokenId -> enrichment balance\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256)))\\n        private _enrichmentBalances;\\n\\n    // Mapping of enrichmentId -> contractAddress -> tokenId -> enrichment URI\\n    mapping(uint256 => mapping(address => mapping(uint256 => string)))\\n        private _enrichmentURIs;\\n\\n    // Mapping of contract addresses to ownerOf(uint256) functions\\n    // DEV: only functions which recieve a uint256 and return an address are supported\\n    mapping(address => string) private _contractOwnerOfFunctions;\\n\\n    // payee address\\n    address private _payee;\\n\\n    function __FungyProofEnrichmentsBase_init_unchained(\\n        string memory name_,\\n        string memory symbol_\\n    ) internal initializer {\\n        name = name_;\\n        symbol = symbol_;\\n    }\\n\\n    function setPayee(address payee_) public virtual onlyOwner {\\n        require(\\n            payee_ != address(0),\\n            \\\"FungyProofEnrichments: set payee to the zero address\\\"\\n        );\\n        _payee = payee_;\\n    }\\n\\n    function payee() public view virtual returns (address) {\\n        return _payee;\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        string memory uri,\\n        uint256 price,\\n        bool permanent\\n    ) public virtual onlyOwner {\\n        require(\\n            to != address(0),\\n            \\\"FungyProofEnrichments: mint to the zero address\\\"\\n        );\\n        require(price >= 0, \\\"FungyProofEnrichments: price must be >= 0\\\");\\n        require(amount > 0, \\\"FungyProofEnrichments: amount must be > 0\\\");\\n\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n\\n        if (bytes(uri).length > 0) {\\n            _setTokenURI(newItemId, uri);\\n        }\\n\\n        _prices[newItemId] = price;\\n        _isPermanent[newItemId] = permanent;\\n        _mint(to, newItemId, amount, \\\"\\\");\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory amounts,\\n        string[] memory uris,\\n        uint256[] memory prices,\\n        bool[] memory permanents\\n    ) public virtual onlyOwner {\\n        require(\\n            to != address(0),\\n            \\\"FungyProofEnrichments: mint to the zero address\\\"\\n        );\\n        require(\\n            (amounts.length == uris.length &&\\n                uris.length == prices.length &&\\n                prices.length == permanents.length),\\n            \\\"FungyProofEnrichments: parameter lengths mismatch\\\"\\n        );\\n\\n        uint256[] memory ids = new uint256[](amounts.length);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _tokenIds.increment();\\n            uint256 newItemId = _tokenIds.current();\\n            ids[i] = newItemId;\\n\\n            if (bytes(uris[i]).length > 0) {\\n                _setTokenURI(newItemId, uris[i]);\\n            }\\n\\n            _prices[newItemId] = prices[i];\\n            _isPermanent[newItemId] = permanents[i];\\n        }\\n\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function bind(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 enrichmentId,\\n        string memory uri\\n    ) public virtual {\\n        require(\\n            enrichmentBalanceOf(contractAddress, tokenId, enrichmentId) == 0,\\n            \\\"FungyProofEnrichments: token already has this enrichment\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        require(\\n            balanceOf(operator, enrichmentId) > 0,\\n            \\\"FungyProofEnrichments: sender does not own enrichment\\\"\\n        );\\n\\n        require(\\n            _ownsToken(contractAddress, tokenId, operator),\\n            \\\"FungyProofEnrichments: sender does not own token\\\"\\n        );\\n\\n        // transfer enrichment to contract\\n        _safeTransferFrom(operator, address(this), enrichmentId, 1, \\\"\\\");\\n\\n        // bind the enrichment\\n        // TODO convert contractAddress, tokenId to key instead of nested maps?\\n        _enrichmentURIs[enrichmentId][contractAddress][tokenId] = uri;\\n        _enrichmentBalances[enrichmentId][contractAddress][tokenId] += 1;\\n\\n        emit Bind(operator, contractAddress, tokenId, enrichmentId, uri);\\n    }\\n\\n    function unbind(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 enrichmentId\\n    ) public virtual {\\n        require(\\n            _enrichmentBalances[enrichmentId][contractAddress][tokenId] >= 0,\\n            \\\"FungyProofEnrichments: enrichment is not bound\\\"\\n        );\\n        require(\\n            _isPermanent[enrichmentId] != true,\\n            \\\"FungyProofEnrichments: enrichment cannot be unbound\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        require(\\n            _ownsToken(contractAddress, tokenId, operator),\\n            \\\"FungyProofEnrichments: sender does not own token\\\"\\n        );\\n\\n        // unbind the enrichment\\n        // TODO convert contractAddress, tokenId to key instead of nested maps?\\n        _enrichmentURIs[enrichmentId][contractAddress][tokenId] = \\\"\\\";\\n        _enrichmentBalances[enrichmentId][contractAddress][tokenId] -= 1;\\n\\n        // transfer enrichment back to owner\\n        _safeTransferFrom(address(this), operator, enrichmentId, 1, \\\"\\\");\\n\\n        emit Unbind(operator, contractAddress, tokenId, enrichmentId);\\n    }\\n\\n    function purchase(uint256 enrichmentId) public payable virtual {\\n        address operator = _msgSender();\\n        address owner_ = owner();\\n        address payee_ = payee();\\n\\n        require(\\n            payee_ != address(0),\\n            \\\"FungyProofEnrichments: payee has not been set\\\"\\n        );\\n\\n        require(\\n            balanceOf(owner_, enrichmentId) > 0,\\n            \\\"FungyProofEnrichments: enrichment is not available for purchase\\\"\\n        );\\n\\n        // take payment using _asyncTransfer\\n        require(\\n            msg.value == _prices[enrichmentId],\\n            \\\"FungyProofEnrichments: wrong payment value\\\"\\n        );\\n        _asyncTransfer(payee_, msg.value);\\n\\n        // transfer enrichment to address\\n        _safeTransferFrom(owner_, operator, enrichmentId, 1, \\\"\\\");\\n\\n        emit Purchase(operator, enrichmentId);\\n    }\\n\\n    function purchaseAndBind(\\n        uint256 enrichmentId,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string memory uri\\n    ) public payable virtual {\\n        purchase(enrichmentId);\\n        bind(contractAddress, tokenId, enrichmentId, uri);\\n    }\\n\\n    function priceOf(uint256 enrichmentId)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return _prices[enrichmentId];\\n    }\\n\\n    function isPermanent(uint256 enrichmentId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return _isPermanent[enrichmentId];\\n    }\\n\\n    function setOwnerOfFunction(\\n        address contractAddress,\\n        string memory ownerOfFunc\\n    ) public virtual onlyOwner {\\n        _contractOwnerOfFunctions[contractAddress] = ownerOfFunc;\\n    }\\n\\n    function enrichmentBalanceOf(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 enrichmentId\\n    ) public view virtual returns (uint256) {\\n        return _enrichmentBalances[enrichmentId][contractAddress][tokenId];\\n    }\\n\\n    function enrichmentURI(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 enrichmentId\\n    ) public view virtual returns (string memory) {\\n        return _enrichmentURIs[enrichmentId][contractAddress][tokenId];\\n    }\\n\\n    function _ownsToken(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address owner\\n    ) private returns (bool) {\\n        require(\\n            contractAddress != address(0),\\n            \\\"FungyProofEnrichments: invalid contract address\\\"\\n        );\\n        string memory func = (bytes(_contractOwnerOfFunctions[contractAddress])\\n            .length != 0)\\n            ? _contractOwnerOfFunctions[contractAddress]\\n            : \\\"ownerOf(uint256)\\\";\\n        bytes memory payload = abi.encodeWithSignature(func, tokenId);\\n        (bool success, bytes memory returnData) = contractAddress.call(payload);\\n        require(\\n            success,\\n            \\\"FungyProofEnrichments: unable to determine token owner\\\"\\n        );\\n        return (_bytesToAddress(returnData) == owner);\\n    }\\n\\n    function _bytesToAddress(bytes memory bys)\\n        private\\n        pure\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := mload(add(bys, 32))\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe69e8ceb9d41755d45b06a818412315fcaf5c248972944737727a9b495615b78\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614332806100206000396000f3fe6080604052600436106101f85760003560e01c8063715018a61161010d578063b9186d7d116100a0578063e985e9c51161006f578063e985e9c514610642578063efef39a11461068b578063f23a6e611461069e578063f242432a146106ca578063f2fde38b146106ea57600080fd5b8063b9186d7d14610582578063bc197c81146105b0578063bd85b039146105f5578063e2982c211461062257600080fd5b80639ef0c789116100dc5780639ef0c789146104d6578063a22cb465146104f6578063a57ed18f14610516578063ae90b2131461056357600080fd5b8063715018a61461045957806374b6802d1461046e5780638da5cb5b1461048e57806395d89b41146104c157600080fd5b806337a0ff27116101905780634f558e791161015f5780634f558e79146103b557806360220f37146103e4578063603074b614610404578063670d07b4146104245780636c0360eb1461044457600080fd5b806337a0ff2714610335578063410459ad146103485780634e1273f4146103685780634f16d1dd1461039557600080fd5b80632ba2dedd116101cc5780632ba2dedd146102a25780632eb2c2d6146102d357806331b3eb94146102f55780633416e9141461031557600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806306fdde03146102605780630e89341c14610282575b600080fd5b34801561020957600080fd5b5061021d610218366004613167565b61070a565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004613359565b6107a3565b6040519015158152602001610227565b34801561026c57600080fd5b506102756107b4565b6040516102279190613661565b34801561028e57600080fd5b5061027561029d366004613414565b610843565b3480156102ae57600080fd5b506102506102bd366004613414565b60009081526101ca602052604090205460ff1690565b3480156102df57600080fd5b506102f36102ee366004612eac565b61084e565b005b34801561030157600080fd5b506102f3610310366004612e51565b6108e5565b34801561032157600080fd5b50610275610330366004613203565b610941565b6102f3610343366004613444565b610a02565b34801561035457600080fd5b506102f3610363366004612e51565b610a1d565b34801561037457600080fd5b50610388610383366004613297565b610ade565b6040516102279190613620565b3480156103a157600080fd5b506102f36103b0366004613237565b610c3f565b3480156103c157600080fd5b506102506103d0366004613414565b600090815260fb6020526040902054151590565b3480156103f057600080fd5b506102f36103ff366004612fbb565b610e6c565b34801561041057600080fd5b506102f361041f366004613391565b611110565b34801561043057600080fd5b506102f361043f366004613192565b6111c4565b34801561045057600080fd5b506102756112e8565b34801561046557600080fd5b506102f361137b565b34801561047a57600080fd5b506102f361048936600461311a565b6113b2565b34801561049a57600080fd5b50610160546001600160a01b03165b6040516001600160a01b039091168152602001610227565b3480156104cd57600080fd5b5061027561140c565b3480156104e257600080fd5b506102f36104f1366004613203565b61141a565b34801561050257600080fd5b506102f36105113660046130e6565b6115ba565b34801561052257600080fd5b5061021d610531366004613203565b60009081526101cb602090815260408083206001600160a01b0395909516835293815283822092825291909152205490565b34801561056f57600080fd5b506101ce546001600160a01b03166104a9565b34801561058e57600080fd5b5061021d61059d366004613414565b60009081526101c9602052604090205490565b3480156105bc57600080fd5b506105dc6105cb366004612eac565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610227565b34801561060157600080fd5b5061021d610610366004613414565b600090815260fb602052604090205490565b34801561062e57600080fd5b5061021d61063d366004612e51565b611691565b34801561064e57600080fd5b5061025061065d366004612e74565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b6102f3610699366004613414565b611710565b3480156106aa57600080fd5b506105dc6106b9366004612f55565b63f23a6e6160e01b95945050505050565b3480156106d657600080fd5b506102f36106e5366004612f55565b6118dd565b3480156106f657600080fd5b506102f3610705366004612e51565b611964565b60006001600160a01b03831661077b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b50600090815260c9602090815260408083206001600160a01b03949094168352929052205490565b60006107ae82611a00565b92915050565b6101c780546107c2906139a1565b80601f01602080910402602001604051908101604052809291908181526020018280546107ee906139a1565b801561083b5780601f106108105761010080835404028352916020019161083b565b820191906000526020600020905b81548152906001019060200180831161081e57829003601f168201915b505050505081565b60606107ae82611a40565b6001600160a01b03851633148061086a575061086a853361065d565b6108d15760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610772565b6108de8585858585611b49565b5050505050565b61012d546040516351cff8d960e01b81526001600160a01b038381166004830152909116906351cff8d990602401600060405180830381600087803b15801561092d57600080fd5b505af11580156108de573d6000803e3d6000fd5b60008181526101cc602090815260408083206001600160a01b03871684528252808320858452909152902080546060919061097b906139a1565b80601f01602080910402602001604051908101604052809291908181526020018280546109a7906139a1565b80156109f45780601f106109c9576101008083540402835291602001916109f4565b820191906000526020600020905b8154815290600101906020018083116109d757829003601f168201915b505050505090509392505050565b610a0b84611710565b610a1783838684610c3f565b50505050565b610160546001600160a01b03163314610a485760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b038116610abb5760405162461bcd60e51b815260206004820152603460248201527f46756e677950726f6f66456e726963686d656e74733a2073657420706179656560448201527320746f20746865207a65726f206164647265737360601b6064820152608401610772565b6101ce80546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610b435760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610772565b600083516001600160401b03811115610b6c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b95578160200160208202803683370190505b50905060005b8451811015610c3757610bfc858281518110610bc757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610bef57634e487b7160e01b600052603260045260246000fd5b602002602001015161070a565b828281518110610c1c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c3081613a08565b9050610b9b565b509392505050565b60008281526101cb602090815260408083206001600160a01b0388168452825280832086845290915290205415610cde5760405162461bcd60e51b815260206004820152603860248201527f46756e677950726f6f66456e726963686d656e74733a20746f6b656e20616c7260448201527f6561647920686173207468697320656e726963686d656e7400000000000000006064820152608401610772565b336000610ceb828561070a565b11610d565760405162461bcd60e51b815260206004820152603560248201527f46756e677950726f6f66456e726963686d656e74733a2073656e64657220646f604482015274195cc81b9bdd081bdddb88195b9c9a58da1b595b9d605a1b6064820152608401610772565b610d61858583611cfc565b610d7d5760405162461bcd60e51b81526004016107729061381d565b610d9a813085600160405180602001604052806000815250611fc2565b60008381526101cc602090815260408083206001600160a01b0389168452825280832087845282529091208351610dd392850190612c46565b5060008381526101cb602090815260408083206001600160a01b038916845282528083208784529091528120805460019290610e10908490613932565b9250508190555083856001600160a01b0316826001600160a01b03167fa4626119b66f7bc11c6a74a5147d03101be293669e55b66aedbec975e23237318686604051610e5d9291906138f6565b60405180910390a45050505050565b610160546001600160a01b03163314610e975760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b038516610ebd5760405162461bcd60e51b8152600401610772906136bc565b82518451148015610ecf575081518351145b8015610edc575080518251145b610f425760405162461bcd60e51b815260206004820152603160248201527f46756e677950726f6f66456e726963686d656e74733a20706172616d65746572604482015270040d8cadccee8d0e640dad2e6dac2e8c6d607b1b6064820152608401610772565b600084516001600160401b03811115610f6b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f94578160200160208202803683370190505b50905060005b85518110156110ec57610fb26101c680546001019055565b6000610fbe6101c65490565b905080838381518110610fe157634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600086838151811061100f57634e487b7160e01b600052603260045260246000fd5b602002602001015151111561104f5761104f8187848151811061104257634e487b7160e01b600052603260045260246000fd5b60200260200101516120ec565b84828151811061106f57634e487b7160e01b600052603260045260246000fd5b60200260200101516101c96000838152602001908152602001600020819055508382815181106110af57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160009283526101ca9091526040909120805460ff1916911515919091179055806110e481613a08565b915050610f9a565b5061110886828760405180602001604052806000815250612151565b505050505050565b600054610100900460ff1680611129575060005460ff16155b6111455760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015611167576000805461ffff19166101011790555b6111728484846121f0565b7fc171a1558b0bdbc31560c11059259b491fa4db1389df2e68cbb1cb1ce6c389533385856040516111a5939291906135e0565b60405180910390a18015610a17576000805461ff001916905550505050565b610160546001600160a01b031633146111ef5760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b0385166112155760405162461bcd60e51b8152600401610772906136bc565b600084116112775760405162461bcd60e51b815260206004820152602960248201527f46756e677950726f6f66456e726963686d656e74733a20616d6f756e74206d7560448201526807374206265203e20360bc1b6064820152608401610772565b6112866101c680546001019055565b60006112926101c65490565b8451909150156112a6576112a681856120ec565b60008181526101c9602090815260408083208690556101ca8252808320805460ff1916861515179055805191820190529081526111089087908390889061223b565b606061019380546112f8906139a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611324906139a1565b80156113715780601f1061134657610100808354040283529160200191611371565b820191906000526020600020905b81548152906001019060200180831161135457829003601f168201915b5050505050905090565b610160546001600160a01b031633146113a65760405162461bcd60e51b8152600401610772906137e8565b6113b06000612270565b565b610160546001600160a01b031633146113dd5760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b03821660009081526101cd60209081526040909120825161140792840190612c46565b505050565b6101c880546107c2906139a1565b60008181526101ca602052604090205460ff1615156001141561149b5760405162461bcd60e51b815260206004820152603360248201527f46756e677950726f6f66456e726963686d656e74733a20656e726963686d656e6044820152721d0818d85b9b9bdd081899481d5b989bdd5b99606a1b6064820152608401610772565b336114a7848483611cfc565b6114c35760405162461bcd60e51b81526004016107729061381d565b60408051602080820180845260008084528681526101cc83528481206001600160a01b038a168252835284812088825290925292902090516115059290612c46565b5060008281526101cb602090815260408083206001600160a01b03881684528252808320868452909152812080546001929061154290849061395e565b92505081905550611566308284600160405180602001604052806000815250611fc2565b82846001600160a01b0316826001600160a01b03167fea1ef714143bae6ce41724c3ef4c1f09618d80035f24a133b1065face55dcaa3856040516115ac91815260200190565b60405180910390a450505050565b336001600160a01b03831614156116255760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610772565b33600081815260ca602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61012d546040516371d4ed8d60e11b81526001600160a01b038381166004830152600092169063e3a9db1a9060240160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae919061342c565b610160546101ce5433916001600160a01b0390811691168061178a5760405162461bcd60e51b815260206004820152602d60248201527f46756e677950726f6f66456e726963686d656e74733a2070617965652068617360448201526c081b9bdd081899595b881cd95d609a1b6064820152608401610772565b6000611796838661070a565b116118095760405162461bcd60e51b815260206004820152603f60248201527f46756e677950726f6f66456e726963686d656e74733a20656e726963686d656e60448201527f74206973206e6f7420617661696c61626c6520666f72207075726368617365006064820152608401610772565b60008481526101c96020526040902054341461187a5760405162461bcd60e51b815260206004820152602a60248201527f46756e677950726f6f66456e726963686d656e74733a2077726f6e67207061796044820152696d656e742076616c756560b01b6064820152608401610772565b61188481346122c3565b6118a1828486600160405180602001604052806000815250611fc2565b60405184906001600160a01b038516907f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f63290600090a350505050565b6001600160a01b0385163314806118f957506118f9853361065d565b6119575760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610772565b6108de8585858585611fc2565b610160546001600160a01b0316331461198f5760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b0381166119f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610772565b6119fd81612270565b50565b60006001600160e01b03198216636cdb3d1360e11b1480611a3157506001600160e01b031982166303a24d0760e21b145b806107ae57506107ae82612320565b60008181526101926020526040812080546060929190611a5f906139a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8b906139a1565b8015611ad85780601f10611aad57610100808354040283529160200191611ad8565b820191906000526020600020905b815481529060010190602001808311611abb57829003601f168201915b505050505090506000611ae96112e8565b9050805160001415611afc575092915050565b815115611b2e578082604051602001611b1692919061350e565b60405160208183030381529060405292505050919050565b80611b3885612355565b604051602001611b1692919061350e565b8151835114611b6a5760405162461bcd60e51b81526004016107729061386d565b6001600160a01b038416611b905760405162461bcd60e51b81526004016107729061370b565b3360005b8451811015611c96576000858281518110611bbf57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611beb57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015611c3c5760405162461bcd60e51b81526004016107729061379e565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c7b908490613932565b9250508190555050505080611c8f90613a08565b9050611b94565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ce6929190613633565b60405180910390a4611108818787878787612476565b60006001600160a01b038416611d6c5760405162461bcd60e51b815260206004820152602f60248201527f46756e677950726f6f66456e726963686d656e74733a20696e76616c6964206360448201526e6f6e7472616374206164647265737360881b6064820152608401610772565b6001600160a01b03841660009081526101cd602052604081208054611d90906139a1565b15159050611dc6576040518060400160405280601081526020016f6f776e65724f662875696e743235362960801b815250611e69565b6001600160a01b03851660009081526101cd602052604090208054611dea906139a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611e16906139a1565b8015611e635780601f10611e3857610100808354040283529160200191611e63565b820191906000526020600020905b815481529060010190602001808311611e4657829003601f168201915b50505050505b905060008185604051602401611e8191815260200190565b60408051601f198184030181529082905291611e9c916134f2565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080876001600160a01b031683604051611ee491906134f2565b6000604051808303816000865af19150503d8060008114611f21576040519150601f19603f3d011682016040523d82523d6000602084013e611f26565b606091505b509150915081611f975760405162461bcd60e51b815260206004820152603660248201527f46756e677950726f6f66456e726963686d656e74733a20756e61626c6520746f604482015275103232ba32b936b4b732903a37b5b2b71037bbb732b960511b6064820152608401610772565b856001600160a01b0316611fac826020015190565b6001600160a01b03161498975050505050505050565b6001600160a01b038416611fe85760405162461bcd60e51b81526004016107729061370b565b33612001818787611ff8886125e1565b6108de886125e1565b600084815260c9602090815260408083206001600160a01b038a168452909152902054838110156120445760405162461bcd60e51b81526004016107729061379e565b600085815260c9602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290612083908490613932565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46120e382888888888861263a565b50505050505050565b600082815261019260209081526040909120825161210c92840190612c46565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61213884611a40565b6040516121459190613661565b60405180910390a25050565b61215d84848484612704565b60005b83518110156108de5782818151811061218957634e487b7160e01b600052603260045260246000fd5b602002602001015160fb60008684815181106121b557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546121da9190613932565b909155506121e9905081613a08565b9050612160565b6121f861286c565b6122006128e0565b6122086129e3565b6122106129e3565b61222860405180602001604052806000815250612a4d565b6122328383612ac3565b61140781612b5a565b61224784848484612b6e565b600083815260fb602052604081208054849290612265908490613932565b909155505050505050565b61016080546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61012d5460405163f340fa0160e01b81526001600160a01b0384811660048301529091169063f340fa019083906024016000604051808303818588803b15801561230c57600080fd5b505af11580156120e3573d6000803e3d6000fd5b60006001600160e01b03198216630271189760e51b14806107ae57506301ffc9a760e01b6001600160e01b03198316146107ae565b6060816123795750506040805180820190915260018152600360fc1b602082015290565b8160005b81156123a3578061238d81613a08565b915061239c9050600a8361394a565b915061237d565b6000816001600160401b038111156123cb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123f5576020820181803683370190505b5090505b841561246e5761240a60018361395e565b9150612417600a86613a23565b612422906030613932565b60f81b81838151811061244557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612467600a8661394a565b94506123f9565b949350505050565b6001600160a01b0384163b156111085760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124ba908990899088908890889060040161353d565b602060405180830381600087803b1580156124d457600080fd5b505af1925050508015612504575060408051601f3d908101601f1916820190925261250191810190613375565b60015b6125b157612510613a79565b806308c379a0141561254a5750612525613a91565b80612530575061254c565b8060405162461bcd60e51b81526004016107729190613661565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610772565b6001600160e01b0319811663bc197c8160e01b146120e35760405162461bcd60e51b815260040161077290613674565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061262957634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156111085760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061267e908990899088908890889060040161359b565b602060405180830381600087803b15801561269857600080fd5b505af19250505080156126c8575060408051601f3d908101601f191682019092526126c591810190613375565b60015b6126d457612510613a79565b6001600160e01b0319811663f23a6e6160e01b146120e35760405162461bcd60e51b815260040161077290613674565b6001600160a01b03841661272a5760405162461bcd60e51b8152600401610772906138b5565b815183511461274b5760405162461bcd60e51b81526004016107729061386d565b3360005b84518110156128045783818151811061277857634e487b7160e01b600052603260045260246000fd5b602002602001015160c960008784815181106127a457634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546127ec9190613932565b909155508190506127fc81613a08565b91505061274f565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612855929190613633565b60405180910390a46108de81600087878787612476565b600054610100900460ff1680612885575060005460ff16155b6128a15760405162461bcd60e51b815260040161077290613750565b600054610100900460ff161580156128c3576000805461ffff19166101011790555b6128cc33612270565b80156119fd576000805461ff001916905550565b600054610100900460ff16806128f9575060005460ff16155b6129155760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015612937576000805461ffff19166101011790555b60405161294390612cca565b604051809103906000f08015801561295f573d6000803e3d6000fd5b5061012d80546001600160a01b0319166001600160a01b039290921691821790556040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b1580156129b757600080fd5b505af11580156129cb573d6000803e3d6000fd5b5050505080156119fd576000805461ff001916905550565b600054610100900460ff16806129fc575060005460ff16155b612a185760405162461bcd60e51b815260040161077290613750565b600054610100900460ff161580156128cc576000805461ffff191661010117905580156119fd576000805461ff001916905550565b600054610100900460ff1680612a66575060005460ff16155b612a825760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015612aa4576000805461ffff19166101011790555b612aad82612c37565b8015612abf576000805461ff00191690555b5050565b600054610100900460ff1680612adc575060005460ff16155b612af85760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015612b1a576000805461ffff19166101011790555b8251612b2e906101c7906020860190612c46565b508151612b43906101c8906020850190612c46565b508015611407576000805461ff0019169055505050565b8051612abf90610193906020840190612c46565b6001600160a01b038416612b945760405162461bcd60e51b8152600401610772906138b5565b33612ba581600087611ff8886125e1565b600084815260c9602090815260408083206001600160a01b038916845290915281208054859290612bd7908490613932565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108de8160008787878761263a565b8051612abf9060cb9060208401905b828054612c52906139a1565b90600052602060002090601f016020900481019282612c745760008555612cba565b82601f10612c8d57805160ff1916838001178555612cba565b82800160010185558215612cba579182015b82811115612cba578251825591602001919060010190612c9f565b50612cc6929150612cd7565b5090565b6107b780613b4683390190565b5b80821115612cc65760008155600101612cd8565b600082601f830112612cfc578081fd5b81356020612d098261390f565b604051612d1682826139dc565b8381528281019150858301600585901b87018401881015612d35578586fd5b855b85811015612d5a57612d4882612dce565b84529284019290840190600101612d37565b5090979650505050505050565b600082601f830112612d77578081fd5b81356020612d848261390f565b604051612d9182826139dc565b8381528281019150858301600585901b87018401881015612db0578586fd5b855b85811015612d5a57813584529284019290840190600101612db2565b80358015158114612dde57600080fd5b919050565b600082601f830112612df3578081fd5b81356001600160401b03811115612e0c57612e0c613a63565b604051612e23601f8301601f1916602001826139dc565b818152846020838601011115612e37578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612e62578081fd5b8135612e6d81613b1a565b9392505050565b60008060408385031215612e86578081fd5b8235612e9181613b1a565b91506020830135612ea181613b1a565b809150509250929050565b600080600080600060a08688031215612ec3578081fd5b8535612ece81613b1a565b94506020860135612ede81613b1a565b935060408601356001600160401b0380821115612ef9578283fd5b612f0589838a01612d67565b94506060880135915080821115612f1a578283fd5b612f2689838a01612d67565b93506080880135915080821115612f3b578283fd5b50612f4888828901612de3565b9150509295509295909350565b600080600080600060a08688031215612f6c578283fd5b8535612f7781613b1a565b94506020860135612f8781613b1a565b9350604086013592506060860135915060808601356001600160401b03811115612faf578182fd5b612f4888828901612de3565b600080600080600060a08688031215612fd2578283fd5b612fdc8635613b1a565b853594506020808701356001600160401b0380821115612ffa578586fd5b6130068a838b01612d67565b9650604089013591508082111561301b578586fd5b818901915089601f83011261302e578586fd5b81356130398161390f565b60405161304682826139dc565b8281528581019150848601600584901b860187018e101561306557898afd5b895b8481101561309d57858235111561307c578a8bfd5b61308b8f8984358a0101612de3565b84529287019290870190600101613067565b5090985050505060608901359250808311156130b7578384fd5b6130c38a848b01612d67565b945060808901359250808311156130d8578384fd5b5050612f4888828901612cec565b600080604083850312156130f8578182fd5b823561310381613b1a565b915061311160208401612dce565b90509250929050565b6000806040838503121561312c578182fd5b823561313781613b1a565b915060208301356001600160401b03811115613151578182fd5b61315d85828601612de3565b9150509250929050565b60008060408385031215613179578182fd5b823561318481613b1a565b946020939093013593505050565b600080600080600060a086880312156131a9578283fd5b85356131b481613b1a565b94506020860135935060408601356001600160401b038111156131d5578384fd5b6131e188828901612de3565b935050606086013591506131f760808701612dce565b90509295509295909350565b600080600060608486031215613217578081fd5b833561322281613b1a565b95602085013595506040909401359392505050565b6000806000806080858703121561324c578182fd5b843561325781613b1a565b9350602085013592506040850135915060608501356001600160401b0381111561327f578182fd5b61328b87828801612de3565b91505092959194509250565b600080604083850312156132a9578182fd5b82356001600160401b03808211156132bf578384fd5b818501915085601f8301126132d2578384fd5b813560206132df8261390f565b6040516132ec82826139dc565b8381528281019150858301600585901b870184018b101561330b578889fd5b8896505b8487101561333657803561332281613b1a565b83526001969096019591830191830161330f565b509650508601359250508082111561334c578283fd5b5061315d85828601612d67565b60006020828403121561336a578081fd5b8135612e6d81613b2f565b600060208284031215613386578081fd5b8151612e6d81613b2f565b6000806000606084860312156133a5578081fd5b83356001600160401b03808211156133bb578283fd5b6133c787838801612de3565b945060208601359150808211156133dc578283fd5b6133e887838801612de3565b935060408601359150808211156133fd578283fd5b5061340a86828701612de3565b9150509250925092565b600060208284031215613425578081fd5b5035919050565b60006020828403121561343d578081fd5b5051919050565b60008060008060808587031215613459578182fd5b84359350602085013561346b81613b1a565b92506040850135915060608501356001600160401b0381111561327f578182fd5b6000815180845260208085019450808401835b838110156134bb5781518752958201959082019060010161349f565b509495945050505050565b600081518084526134de816020860160208601613975565b601f01601f19169290920160200192915050565b60008251613504818460208701613975565b9190910192915050565b60008351613520818460208801613975565b835190830190613534818360208801613975565b01949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906135699083018661348c565b828103606084015261357b818661348c565b9050828103608084015261358f81856134c6565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906135d5908301846134c6565b979650505050505050565b6001600160a01b0384168152606060208201819052600090613604908301856134c6565b828103604084015261361681856134c6565b9695505050505050565b602081526000612e6d602083018461348c565b604081526000613646604083018561348c565b8281036020840152613658818561348c565b95945050505050565b602081526000612e6d60208301846134c6565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602f908201527f46756e677950726f6f66456e726963686d656e74733a206d696e7420746f207460408201526e6865207a65726f206164647265737360881b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526030908201527f46756e677950726f6f66456e726963686d656e74733a2073656e64657220646f60408201526f32b9903737ba1037bbb7103a37b5b2b760811b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b82815260406020820152600061246e60408301846134c6565b60006001600160401b0382111561392857613928613a63565b5060051b60200190565b6000821982111561394557613945613a37565b500190565b60008261395957613959613a4d565b500490565b60008282101561397057613970613a37565b500390565b60005b83811015613990578181015183820152602001613978565b83811115610a175750506000910152565b600181811c908216806139b557607f821691505b602082108114156139d657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715613a0157613a01613a63565b6040525050565b6000600019821415613a1c57613a1c613a37565b5060010190565b600082613a3257613a32613a4d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115613a8e57600481823e5160e01c5b90565b600060443d1015613a9f5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613ace57505050505090565b8285019150815181811115613ae65750505050505090565b843d8701016020828501011115613b005750505050505090565b613b0f602082860101876139dc565b509095945050505050565b6001600160a01b03811681146119fd57600080fd5b6001600160e01b0319811681146119fd57600080fdfe608060405234801561001057600080fd5b50610797806100206000396000f3fe6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b146100c1578063e3a9db1a146100ee578063f2fde38b14610132578063f340fa011461015257600080fd5b806351cff8d914610075578063715018a6146100975780638129fc1c146100ac575b600080fd5b34801561008157600080fd5b50610095610090366004610682565b610165565b005b3480156100a357600080fd5b50610095610207565b3480156100b857600080fd5b5061009561023d565b3480156100cd57600080fd5b506033546040516001600160a01b0390911681526020015b60405180910390f35b3480156100fa57600080fd5b50610124610109366004610682565b6001600160a01b031660009081526065602052604090205490565b6040519081526020016100e5565b34801561013e57600080fd5b5061009561014d366004610682565b6102b1565b610095610160366004610682565b610349565b6033546001600160a01b031633146101985760405162461bcd60e51b815260040161018f906106f3565b60405180910390fd5b6001600160a01b03811660008181526065602052604081208054919055906101c090826103dd565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101fb91815260200190565b60405180910390a25050565b6033546001600160a01b031633146102315760405162461bcd60e51b815260040161018f906106f3565b61023b60006104fb565b565b600054610100900460ff1680610256575060005460ff16155b6102725760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff16158015610294576000805461ffff19166101011790555b61029c61054d565b80156102ae576000805461ff00191690555b50565b6033546001600160a01b031633146102db5760405162461bcd60e51b815260040161018f906106f3565b6001600160a01b0381166103405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161018f565b6102ae816104fb565b6033546001600160a01b031633146103735760405162461bcd60e51b815260040161018f906106f3565b6001600160a01b03811660009081526065602052604081208054349283929161039d908490610728565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101fb565b8047101561042d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161018f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461047a576040519150601f19603f3d011682016040523d82523d6000602084013e61047f565b606091505b50509050806104f65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161018f565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610566575060005460ff16155b6105825760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff161580156105a4576000805461ffff19166101011790555b6105ac6105b8565b6105b4610622565b61029c5b600054610100900460ff16806105d1575060005460ff16155b6105ed5760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff1615801561029c576000805461ffff191661010117905580156102ae576000805461ff001916905550565b600054610100900460ff168061063b575060005460ff16155b6106575760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff16158015610679576000805461ffff19166101011790555b61029c336104fb565b600060208284031215610693578081fd5b813561069e8161074c565b9392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561074757634e487b7160e01b81526011600452602481fd5b500190565b6001600160a01b03811681146102ae57600080fdfea2646970667358221220dccecec3e8575ab3581ba72d2d6a0ceef01663e771bbc7f4b5f9253cb96b707464736f6c63430008040033a264697066735822122077739991021de7ea0448486e522e0e91748113dbfb4a73210e13537e06dcaf6264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c8063715018a61161010d578063b9186d7d116100a0578063e985e9c51161006f578063e985e9c514610642578063efef39a11461068b578063f23a6e611461069e578063f242432a146106ca578063f2fde38b146106ea57600080fd5b8063b9186d7d14610582578063bc197c81146105b0578063bd85b039146105f5578063e2982c211461062257600080fd5b80639ef0c789116100dc5780639ef0c789146104d6578063a22cb465146104f6578063a57ed18f14610516578063ae90b2131461056357600080fd5b8063715018a61461045957806374b6802d1461046e5780638da5cb5b1461048e57806395d89b41146104c157600080fd5b806337a0ff27116101905780634f558e791161015f5780634f558e79146103b557806360220f37146103e4578063603074b614610404578063670d07b4146104245780636c0360eb1461044457600080fd5b806337a0ff2714610335578063410459ad146103485780634e1273f4146103685780634f16d1dd1461039557600080fd5b80632ba2dedd116101cc5780632ba2dedd146102a25780632eb2c2d6146102d357806331b3eb94146102f55780633416e9141461031557600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806306fdde03146102605780630e89341c14610282575b600080fd5b34801561020957600080fd5b5061021d610218366004613167565b61070a565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004613359565b6107a3565b6040519015158152602001610227565b34801561026c57600080fd5b506102756107b4565b6040516102279190613661565b34801561028e57600080fd5b5061027561029d366004613414565b610843565b3480156102ae57600080fd5b506102506102bd366004613414565b60009081526101ca602052604090205460ff1690565b3480156102df57600080fd5b506102f36102ee366004612eac565b61084e565b005b34801561030157600080fd5b506102f3610310366004612e51565b6108e5565b34801561032157600080fd5b50610275610330366004613203565b610941565b6102f3610343366004613444565b610a02565b34801561035457600080fd5b506102f3610363366004612e51565b610a1d565b34801561037457600080fd5b50610388610383366004613297565b610ade565b6040516102279190613620565b3480156103a157600080fd5b506102f36103b0366004613237565b610c3f565b3480156103c157600080fd5b506102506103d0366004613414565b600090815260fb6020526040902054151590565b3480156103f057600080fd5b506102f36103ff366004612fbb565b610e6c565b34801561041057600080fd5b506102f361041f366004613391565b611110565b34801561043057600080fd5b506102f361043f366004613192565b6111c4565b34801561045057600080fd5b506102756112e8565b34801561046557600080fd5b506102f361137b565b34801561047a57600080fd5b506102f361048936600461311a565b6113b2565b34801561049a57600080fd5b50610160546001600160a01b03165b6040516001600160a01b039091168152602001610227565b3480156104cd57600080fd5b5061027561140c565b3480156104e257600080fd5b506102f36104f1366004613203565b61141a565b34801561050257600080fd5b506102f36105113660046130e6565b6115ba565b34801561052257600080fd5b5061021d610531366004613203565b60009081526101cb602090815260408083206001600160a01b0395909516835293815283822092825291909152205490565b34801561056f57600080fd5b506101ce546001600160a01b03166104a9565b34801561058e57600080fd5b5061021d61059d366004613414565b60009081526101c9602052604090205490565b3480156105bc57600080fd5b506105dc6105cb366004612eac565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610227565b34801561060157600080fd5b5061021d610610366004613414565b600090815260fb602052604090205490565b34801561062e57600080fd5b5061021d61063d366004612e51565b611691565b34801561064e57600080fd5b5061025061065d366004612e74565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b6102f3610699366004613414565b611710565b3480156106aa57600080fd5b506105dc6106b9366004612f55565b63f23a6e6160e01b95945050505050565b3480156106d657600080fd5b506102f36106e5366004612f55565b6118dd565b3480156106f657600080fd5b506102f3610705366004612e51565b611964565b60006001600160a01b03831661077b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b50600090815260c9602090815260408083206001600160a01b03949094168352929052205490565b60006107ae82611a00565b92915050565b6101c780546107c2906139a1565b80601f01602080910402602001604051908101604052809291908181526020018280546107ee906139a1565b801561083b5780601f106108105761010080835404028352916020019161083b565b820191906000526020600020905b81548152906001019060200180831161081e57829003601f168201915b505050505081565b60606107ae82611a40565b6001600160a01b03851633148061086a575061086a853361065d565b6108d15760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610772565b6108de8585858585611b49565b5050505050565b61012d546040516351cff8d960e01b81526001600160a01b038381166004830152909116906351cff8d990602401600060405180830381600087803b15801561092d57600080fd5b505af11580156108de573d6000803e3d6000fd5b60008181526101cc602090815260408083206001600160a01b03871684528252808320858452909152902080546060919061097b906139a1565b80601f01602080910402602001604051908101604052809291908181526020018280546109a7906139a1565b80156109f45780601f106109c9576101008083540402835291602001916109f4565b820191906000526020600020905b8154815290600101906020018083116109d757829003601f168201915b505050505090509392505050565b610a0b84611710565b610a1783838684610c3f565b50505050565b610160546001600160a01b03163314610a485760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b038116610abb5760405162461bcd60e51b815260206004820152603460248201527f46756e677950726f6f66456e726963686d656e74733a2073657420706179656560448201527320746f20746865207a65726f206164647265737360601b6064820152608401610772565b6101ce80546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610b435760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610772565b600083516001600160401b03811115610b6c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b95578160200160208202803683370190505b50905060005b8451811015610c3757610bfc858281518110610bc757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610bef57634e487b7160e01b600052603260045260246000fd5b602002602001015161070a565b828281518110610c1c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c3081613a08565b9050610b9b565b509392505050565b60008281526101cb602090815260408083206001600160a01b0388168452825280832086845290915290205415610cde5760405162461bcd60e51b815260206004820152603860248201527f46756e677950726f6f66456e726963686d656e74733a20746f6b656e20616c7260448201527f6561647920686173207468697320656e726963686d656e7400000000000000006064820152608401610772565b336000610ceb828561070a565b11610d565760405162461bcd60e51b815260206004820152603560248201527f46756e677950726f6f66456e726963686d656e74733a2073656e64657220646f604482015274195cc81b9bdd081bdddb88195b9c9a58da1b595b9d605a1b6064820152608401610772565b610d61858583611cfc565b610d7d5760405162461bcd60e51b81526004016107729061381d565b610d9a813085600160405180602001604052806000815250611fc2565b60008381526101cc602090815260408083206001600160a01b0389168452825280832087845282529091208351610dd392850190612c46565b5060008381526101cb602090815260408083206001600160a01b038916845282528083208784529091528120805460019290610e10908490613932565b9250508190555083856001600160a01b0316826001600160a01b03167fa4626119b66f7bc11c6a74a5147d03101be293669e55b66aedbec975e23237318686604051610e5d9291906138f6565b60405180910390a45050505050565b610160546001600160a01b03163314610e975760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b038516610ebd5760405162461bcd60e51b8152600401610772906136bc565b82518451148015610ecf575081518351145b8015610edc575080518251145b610f425760405162461bcd60e51b815260206004820152603160248201527f46756e677950726f6f66456e726963686d656e74733a20706172616d65746572604482015270040d8cadccee8d0e640dad2e6dac2e8c6d607b1b6064820152608401610772565b600084516001600160401b03811115610f6b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f94578160200160208202803683370190505b50905060005b85518110156110ec57610fb26101c680546001019055565b6000610fbe6101c65490565b905080838381518110610fe157634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600086838151811061100f57634e487b7160e01b600052603260045260246000fd5b602002602001015151111561104f5761104f8187848151811061104257634e487b7160e01b600052603260045260246000fd5b60200260200101516120ec565b84828151811061106f57634e487b7160e01b600052603260045260246000fd5b60200260200101516101c96000838152602001908152602001600020819055508382815181106110af57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160009283526101ca9091526040909120805460ff1916911515919091179055806110e481613a08565b915050610f9a565b5061110886828760405180602001604052806000815250612151565b505050505050565b600054610100900460ff1680611129575060005460ff16155b6111455760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015611167576000805461ffff19166101011790555b6111728484846121f0565b7fc171a1558b0bdbc31560c11059259b491fa4db1389df2e68cbb1cb1ce6c389533385856040516111a5939291906135e0565b60405180910390a18015610a17576000805461ff001916905550505050565b610160546001600160a01b031633146111ef5760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b0385166112155760405162461bcd60e51b8152600401610772906136bc565b600084116112775760405162461bcd60e51b815260206004820152602960248201527f46756e677950726f6f66456e726963686d656e74733a20616d6f756e74206d7560448201526807374206265203e20360bc1b6064820152608401610772565b6112866101c680546001019055565b60006112926101c65490565b8451909150156112a6576112a681856120ec565b60008181526101c9602090815260408083208690556101ca8252808320805460ff1916861515179055805191820190529081526111089087908390889061223b565b606061019380546112f8906139a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611324906139a1565b80156113715780601f1061134657610100808354040283529160200191611371565b820191906000526020600020905b81548152906001019060200180831161135457829003601f168201915b5050505050905090565b610160546001600160a01b031633146113a65760405162461bcd60e51b8152600401610772906137e8565b6113b06000612270565b565b610160546001600160a01b031633146113dd5760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b03821660009081526101cd60209081526040909120825161140792840190612c46565b505050565b6101c880546107c2906139a1565b60008181526101ca602052604090205460ff1615156001141561149b5760405162461bcd60e51b815260206004820152603360248201527f46756e677950726f6f66456e726963686d656e74733a20656e726963686d656e6044820152721d0818d85b9b9bdd081899481d5b989bdd5b99606a1b6064820152608401610772565b336114a7848483611cfc565b6114c35760405162461bcd60e51b81526004016107729061381d565b60408051602080820180845260008084528681526101cc83528481206001600160a01b038a168252835284812088825290925292902090516115059290612c46565b5060008281526101cb602090815260408083206001600160a01b03881684528252808320868452909152812080546001929061154290849061395e565b92505081905550611566308284600160405180602001604052806000815250611fc2565b82846001600160a01b0316826001600160a01b03167fea1ef714143bae6ce41724c3ef4c1f09618d80035f24a133b1065face55dcaa3856040516115ac91815260200190565b60405180910390a450505050565b336001600160a01b03831614156116255760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610772565b33600081815260ca602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61012d546040516371d4ed8d60e11b81526001600160a01b038381166004830152600092169063e3a9db1a9060240160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae919061342c565b610160546101ce5433916001600160a01b0390811691168061178a5760405162461bcd60e51b815260206004820152602d60248201527f46756e677950726f6f66456e726963686d656e74733a2070617965652068617360448201526c081b9bdd081899595b881cd95d609a1b6064820152608401610772565b6000611796838661070a565b116118095760405162461bcd60e51b815260206004820152603f60248201527f46756e677950726f6f66456e726963686d656e74733a20656e726963686d656e60448201527f74206973206e6f7420617661696c61626c6520666f72207075726368617365006064820152608401610772565b60008481526101c96020526040902054341461187a5760405162461bcd60e51b815260206004820152602a60248201527f46756e677950726f6f66456e726963686d656e74733a2077726f6e67207061796044820152696d656e742076616c756560b01b6064820152608401610772565b61188481346122c3565b6118a1828486600160405180602001604052806000815250611fc2565b60405184906001600160a01b038516907f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f63290600090a350505050565b6001600160a01b0385163314806118f957506118f9853361065d565b6119575760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610772565b6108de8585858585611fc2565b610160546001600160a01b0316331461198f5760405162461bcd60e51b8152600401610772906137e8565b6001600160a01b0381166119f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610772565b6119fd81612270565b50565b60006001600160e01b03198216636cdb3d1360e11b1480611a3157506001600160e01b031982166303a24d0760e21b145b806107ae57506107ae82612320565b60008181526101926020526040812080546060929190611a5f906139a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8b906139a1565b8015611ad85780601f10611aad57610100808354040283529160200191611ad8565b820191906000526020600020905b815481529060010190602001808311611abb57829003601f168201915b505050505090506000611ae96112e8565b9050805160001415611afc575092915050565b815115611b2e578082604051602001611b1692919061350e565b60405160208183030381529060405292505050919050565b80611b3885612355565b604051602001611b1692919061350e565b8151835114611b6a5760405162461bcd60e51b81526004016107729061386d565b6001600160a01b038416611b905760405162461bcd60e51b81526004016107729061370b565b3360005b8451811015611c96576000858281518110611bbf57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611beb57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015611c3c5760405162461bcd60e51b81526004016107729061379e565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c7b908490613932565b9250508190555050505080611c8f90613a08565b9050611b94565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ce6929190613633565b60405180910390a4611108818787878787612476565b60006001600160a01b038416611d6c5760405162461bcd60e51b815260206004820152602f60248201527f46756e677950726f6f66456e726963686d656e74733a20696e76616c6964206360448201526e6f6e7472616374206164647265737360881b6064820152608401610772565b6001600160a01b03841660009081526101cd602052604081208054611d90906139a1565b15159050611dc6576040518060400160405280601081526020016f6f776e65724f662875696e743235362960801b815250611e69565b6001600160a01b03851660009081526101cd602052604090208054611dea906139a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611e16906139a1565b8015611e635780601f10611e3857610100808354040283529160200191611e63565b820191906000526020600020905b815481529060010190602001808311611e4657829003601f168201915b50505050505b905060008185604051602401611e8191815260200190565b60408051601f198184030181529082905291611e9c916134f2565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080876001600160a01b031683604051611ee491906134f2565b6000604051808303816000865af19150503d8060008114611f21576040519150601f19603f3d011682016040523d82523d6000602084013e611f26565b606091505b509150915081611f975760405162461bcd60e51b815260206004820152603660248201527f46756e677950726f6f66456e726963686d656e74733a20756e61626c6520746f604482015275103232ba32b936b4b732903a37b5b2b71037bbb732b960511b6064820152608401610772565b856001600160a01b0316611fac826020015190565b6001600160a01b03161498975050505050505050565b6001600160a01b038416611fe85760405162461bcd60e51b81526004016107729061370b565b33612001818787611ff8886125e1565b6108de886125e1565b600084815260c9602090815260408083206001600160a01b038a168452909152902054838110156120445760405162461bcd60e51b81526004016107729061379e565b600085815260c9602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290612083908490613932565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46120e382888888888861263a565b50505050505050565b600082815261019260209081526040909120825161210c92840190612c46565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61213884611a40565b6040516121459190613661565b60405180910390a25050565b61215d84848484612704565b60005b83518110156108de5782818151811061218957634e487b7160e01b600052603260045260246000fd5b602002602001015160fb60008684815181106121b557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546121da9190613932565b909155506121e9905081613a08565b9050612160565b6121f861286c565b6122006128e0565b6122086129e3565b6122106129e3565b61222860405180602001604052806000815250612a4d565b6122328383612ac3565b61140781612b5a565b61224784848484612b6e565b600083815260fb602052604081208054849290612265908490613932565b909155505050505050565b61016080546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61012d5460405163f340fa0160e01b81526001600160a01b0384811660048301529091169063f340fa019083906024016000604051808303818588803b15801561230c57600080fd5b505af11580156120e3573d6000803e3d6000fd5b60006001600160e01b03198216630271189760e51b14806107ae57506301ffc9a760e01b6001600160e01b03198316146107ae565b6060816123795750506040805180820190915260018152600360fc1b602082015290565b8160005b81156123a3578061238d81613a08565b915061239c9050600a8361394a565b915061237d565b6000816001600160401b038111156123cb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123f5576020820181803683370190505b5090505b841561246e5761240a60018361395e565b9150612417600a86613a23565b612422906030613932565b60f81b81838151811061244557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612467600a8661394a565b94506123f9565b949350505050565b6001600160a01b0384163b156111085760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124ba908990899088908890889060040161353d565b602060405180830381600087803b1580156124d457600080fd5b505af1925050508015612504575060408051601f3d908101601f1916820190925261250191810190613375565b60015b6125b157612510613a79565b806308c379a0141561254a5750612525613a91565b80612530575061254c565b8060405162461bcd60e51b81526004016107729190613661565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610772565b6001600160e01b0319811663bc197c8160e01b146120e35760405162461bcd60e51b815260040161077290613674565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061262957634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156111085760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061267e908990899088908890889060040161359b565b602060405180830381600087803b15801561269857600080fd5b505af19250505080156126c8575060408051601f3d908101601f191682019092526126c591810190613375565b60015b6126d457612510613a79565b6001600160e01b0319811663f23a6e6160e01b146120e35760405162461bcd60e51b815260040161077290613674565b6001600160a01b03841661272a5760405162461bcd60e51b8152600401610772906138b5565b815183511461274b5760405162461bcd60e51b81526004016107729061386d565b3360005b84518110156128045783818151811061277857634e487b7160e01b600052603260045260246000fd5b602002602001015160c960008784815181106127a457634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546127ec9190613932565b909155508190506127fc81613a08565b91505061274f565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612855929190613633565b60405180910390a46108de81600087878787612476565b600054610100900460ff1680612885575060005460ff16155b6128a15760405162461bcd60e51b815260040161077290613750565b600054610100900460ff161580156128c3576000805461ffff19166101011790555b6128cc33612270565b80156119fd576000805461ff001916905550565b600054610100900460ff16806128f9575060005460ff16155b6129155760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015612937576000805461ffff19166101011790555b60405161294390612cca565b604051809103906000f08015801561295f573d6000803e3d6000fd5b5061012d80546001600160a01b0319166001600160a01b039290921691821790556040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b1580156129b757600080fd5b505af11580156129cb573d6000803e3d6000fd5b5050505080156119fd576000805461ff001916905550565b600054610100900460ff16806129fc575060005460ff16155b612a185760405162461bcd60e51b815260040161077290613750565b600054610100900460ff161580156128cc576000805461ffff191661010117905580156119fd576000805461ff001916905550565b600054610100900460ff1680612a66575060005460ff16155b612a825760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015612aa4576000805461ffff19166101011790555b612aad82612c37565b8015612abf576000805461ff00191690555b5050565b600054610100900460ff1680612adc575060005460ff16155b612af85760405162461bcd60e51b815260040161077290613750565b600054610100900460ff16158015612b1a576000805461ffff19166101011790555b8251612b2e906101c7906020860190612c46565b508151612b43906101c8906020850190612c46565b508015611407576000805461ff0019169055505050565b8051612abf90610193906020840190612c46565b6001600160a01b038416612b945760405162461bcd60e51b8152600401610772906138b5565b33612ba581600087611ff8886125e1565b600084815260c9602090815260408083206001600160a01b038916845290915281208054859290612bd7908490613932565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108de8160008787878761263a565b8051612abf9060cb9060208401905b828054612c52906139a1565b90600052602060002090601f016020900481019282612c745760008555612cba565b82601f10612c8d57805160ff1916838001178555612cba565b82800160010185558215612cba579182015b82811115612cba578251825591602001919060010190612c9f565b50612cc6929150612cd7565b5090565b6107b780613b4683390190565b5b80821115612cc65760008155600101612cd8565b600082601f830112612cfc578081fd5b81356020612d098261390f565b604051612d1682826139dc565b8381528281019150858301600585901b87018401881015612d35578586fd5b855b85811015612d5a57612d4882612dce565b84529284019290840190600101612d37565b5090979650505050505050565b600082601f830112612d77578081fd5b81356020612d848261390f565b604051612d9182826139dc565b8381528281019150858301600585901b87018401881015612db0578586fd5b855b85811015612d5a57813584529284019290840190600101612db2565b80358015158114612dde57600080fd5b919050565b600082601f830112612df3578081fd5b81356001600160401b03811115612e0c57612e0c613a63565b604051612e23601f8301601f1916602001826139dc565b818152846020838601011115612e37578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612e62578081fd5b8135612e6d81613b1a565b9392505050565b60008060408385031215612e86578081fd5b8235612e9181613b1a565b91506020830135612ea181613b1a565b809150509250929050565b600080600080600060a08688031215612ec3578081fd5b8535612ece81613b1a565b94506020860135612ede81613b1a565b935060408601356001600160401b0380821115612ef9578283fd5b612f0589838a01612d67565b94506060880135915080821115612f1a578283fd5b612f2689838a01612d67565b93506080880135915080821115612f3b578283fd5b50612f4888828901612de3565b9150509295509295909350565b600080600080600060a08688031215612f6c578283fd5b8535612f7781613b1a565b94506020860135612f8781613b1a565b9350604086013592506060860135915060808601356001600160401b03811115612faf578182fd5b612f4888828901612de3565b600080600080600060a08688031215612fd2578283fd5b612fdc8635613b1a565b853594506020808701356001600160401b0380821115612ffa578586fd5b6130068a838b01612d67565b9650604089013591508082111561301b578586fd5b818901915089601f83011261302e578586fd5b81356130398161390f565b60405161304682826139dc565b8281528581019150848601600584901b860187018e101561306557898afd5b895b8481101561309d57858235111561307c578a8bfd5b61308b8f8984358a0101612de3565b84529287019290870190600101613067565b5090985050505060608901359250808311156130b7578384fd5b6130c38a848b01612d67565b945060808901359250808311156130d8578384fd5b5050612f4888828901612cec565b600080604083850312156130f8578182fd5b823561310381613b1a565b915061311160208401612dce565b90509250929050565b6000806040838503121561312c578182fd5b823561313781613b1a565b915060208301356001600160401b03811115613151578182fd5b61315d85828601612de3565b9150509250929050565b60008060408385031215613179578182fd5b823561318481613b1a565b946020939093013593505050565b600080600080600060a086880312156131a9578283fd5b85356131b481613b1a565b94506020860135935060408601356001600160401b038111156131d5578384fd5b6131e188828901612de3565b935050606086013591506131f760808701612dce565b90509295509295909350565b600080600060608486031215613217578081fd5b833561322281613b1a565b95602085013595506040909401359392505050565b6000806000806080858703121561324c578182fd5b843561325781613b1a565b9350602085013592506040850135915060608501356001600160401b0381111561327f578182fd5b61328b87828801612de3565b91505092959194509250565b600080604083850312156132a9578182fd5b82356001600160401b03808211156132bf578384fd5b818501915085601f8301126132d2578384fd5b813560206132df8261390f565b6040516132ec82826139dc565b8381528281019150858301600585901b870184018b101561330b578889fd5b8896505b8487101561333657803561332281613b1a565b83526001969096019591830191830161330f565b509650508601359250508082111561334c578283fd5b5061315d85828601612d67565b60006020828403121561336a578081fd5b8135612e6d81613b2f565b600060208284031215613386578081fd5b8151612e6d81613b2f565b6000806000606084860312156133a5578081fd5b83356001600160401b03808211156133bb578283fd5b6133c787838801612de3565b945060208601359150808211156133dc578283fd5b6133e887838801612de3565b935060408601359150808211156133fd578283fd5b5061340a86828701612de3565b9150509250925092565b600060208284031215613425578081fd5b5035919050565b60006020828403121561343d578081fd5b5051919050565b60008060008060808587031215613459578182fd5b84359350602085013561346b81613b1a565b92506040850135915060608501356001600160401b0381111561327f578182fd5b6000815180845260208085019450808401835b838110156134bb5781518752958201959082019060010161349f565b509495945050505050565b600081518084526134de816020860160208601613975565b601f01601f19169290920160200192915050565b60008251613504818460208701613975565b9190910192915050565b60008351613520818460208801613975565b835190830190613534818360208801613975565b01949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906135699083018661348c565b828103606084015261357b818661348c565b9050828103608084015261358f81856134c6565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906135d5908301846134c6565b979650505050505050565b6001600160a01b0384168152606060208201819052600090613604908301856134c6565b828103604084015261361681856134c6565b9695505050505050565b602081526000612e6d602083018461348c565b604081526000613646604083018561348c565b8281036020840152613658818561348c565b95945050505050565b602081526000612e6d60208301846134c6565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602f908201527f46756e677950726f6f66456e726963686d656e74733a206d696e7420746f207460408201526e6865207a65726f206164647265737360881b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526030908201527f46756e677950726f6f66456e726963686d656e74733a2073656e64657220646f60408201526f32b9903737ba1037bbb7103a37b5b2b760811b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b82815260406020820152600061246e60408301846134c6565b60006001600160401b0382111561392857613928613a63565b5060051b60200190565b6000821982111561394557613945613a37565b500190565b60008261395957613959613a4d565b500490565b60008282101561397057613970613a37565b500390565b60005b83811015613990578181015183820152602001613978565b83811115610a175750506000910152565b600181811c908216806139b557607f821691505b602082108114156139d657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715613a0157613a01613a63565b6040525050565b6000600019821415613a1c57613a1c613a37565b5060010190565b600082613a3257613a32613a4d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115613a8e57600481823e5160e01c5b90565b600060443d1015613a9f5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613ace57505050505090565b8285019150815181811115613ae65750505050505090565b843d8701016020828501011115613b005750505050505090565b613b0f602082860101876139dc565b509095945050505050565b6001600160a01b03811681146119fd57600080fd5b6001600160e01b0319811681146119fd57600080fdfe608060405234801561001057600080fd5b50610797806100206000396000f3fe6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b146100c1578063e3a9db1a146100ee578063f2fde38b14610132578063f340fa011461015257600080fd5b806351cff8d914610075578063715018a6146100975780638129fc1c146100ac575b600080fd5b34801561008157600080fd5b50610095610090366004610682565b610165565b005b3480156100a357600080fd5b50610095610207565b3480156100b857600080fd5b5061009561023d565b3480156100cd57600080fd5b506033546040516001600160a01b0390911681526020015b60405180910390f35b3480156100fa57600080fd5b50610124610109366004610682565b6001600160a01b031660009081526065602052604090205490565b6040519081526020016100e5565b34801561013e57600080fd5b5061009561014d366004610682565b6102b1565b610095610160366004610682565b610349565b6033546001600160a01b031633146101985760405162461bcd60e51b815260040161018f906106f3565b60405180910390fd5b6001600160a01b03811660008181526065602052604081208054919055906101c090826103dd565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101fb91815260200190565b60405180910390a25050565b6033546001600160a01b031633146102315760405162461bcd60e51b815260040161018f906106f3565b61023b60006104fb565b565b600054610100900460ff1680610256575060005460ff16155b6102725760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff16158015610294576000805461ffff19166101011790555b61029c61054d565b80156102ae576000805461ff00191690555b50565b6033546001600160a01b031633146102db5760405162461bcd60e51b815260040161018f906106f3565b6001600160a01b0381166103405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161018f565b6102ae816104fb565b6033546001600160a01b031633146103735760405162461bcd60e51b815260040161018f906106f3565b6001600160a01b03811660009081526065602052604081208054349283929161039d908490610728565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101fb565b8047101561042d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161018f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461047a576040519150601f19603f3d011682016040523d82523d6000602084013e61047f565b606091505b50509050806104f65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161018f565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610566575060005460ff16155b6105825760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff161580156105a4576000805461ffff19166101011790555b6105ac6105b8565b6105b4610622565b61029c5b600054610100900460ff16806105d1575060005460ff16155b6105ed5760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff1615801561029c576000805461ffff191661010117905580156102ae576000805461ff001916905550565b600054610100900460ff168061063b575060005460ff16155b6106575760405162461bcd60e51b815260040161018f906106a5565b600054610100900460ff16158015610679576000805461ffff19166101011790555b61029c336104fb565b600060208284031215610693578081fd5b813561069e8161074c565b9392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561074757634e487b7160e01b81526011600452602481fd5b500190565b6001600160a01b03811681146102ae57600080fdfea2646970667358221220dccecec3e8575ab3581ba72d2d6a0ceef01663e771bbc7f4b5f9253cb96b707464736f6c63430008040033a264697066735822122077739991021de7ea0448486e522e0e91748113dbfb4a73210e13537e06dcaf6264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "exists(uint256)": {
        "details": "Indicates weither any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2184,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2640,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1895,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1836,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 285,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 291,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 293,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_uri",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 1363,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1561,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1742,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 180,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_escrow",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(EscrowUpgradeable)2595"
      },
      {
        "astId": 255,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_owner",
        "offset": 0,
        "slot": "352",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2678,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2680,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_baseURI",
        "offset": 0,
        "slot": "403",
        "type": "t_string_storage"
      },
      {
        "astId": 2814,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "454",
        "type": "t_struct(Counter)2191_storage"
      },
      {
        "astId": 2909,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "name",
        "offset": 0,
        "slot": "455",
        "type": "t_string_storage"
      },
      {
        "astId": 2911,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "symbol",
        "offset": 0,
        "slot": "456",
        "type": "t_string_storage"
      },
      {
        "astId": 2943,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_prices",
        "offset": 0,
        "slot": "457",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2947,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_isPermanent",
        "offset": 0,
        "slot": "458",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2955,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_enrichmentBalances",
        "offset": 0,
        "slot": "459",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 2963,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_enrichmentURIs",
        "offset": 0,
        "slot": "460",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_string_storage)))"
      },
      {
        "astId": 2967,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_contractOwnerOfFunctions",
        "offset": 0,
        "slot": "461",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2969,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "_payee",
        "offset": 0,
        "slot": "462",
        "type": "t_address"
      },
      {
        "astId": 3661,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "463",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2892,
        "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
        "label": "__gap",
        "offset": 0,
        "slot": "513",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(EscrowUpgradeable)2595": {
        "encoding": "inplace",
        "label": "contract EscrowUpgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2191_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2190,
            "contract": "contracts/FungyProofEnrichments.sol:FungyProofEnrichments",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}